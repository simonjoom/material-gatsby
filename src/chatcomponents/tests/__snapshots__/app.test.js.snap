// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Login 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Login />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <WithStyles(Paper)
        className="paperIn"
>
        <h4
                className="mv3"
        >
                Login
        </h4>
        <div
                className="flex flex-column"
        >
                <TextField
                        id="email"
                        label="Your email address"
                        onChange={[Function]}
                        required={false}
                        select={false}
                        type="text"
                        value=""
                />
                <TextField
                        id="password"
                        label="Password"
                        onChange={[Function]}
                        required={false}
                        select={false}
                        type="password"
                        value=""
                />
        </div>
        <div
                className="flex mt3"
        >
                <WithStyles(Button)
                        id="ok"
                        onClick={[Function]}
                        variant="raised"
                >
                        Ok
                </WithStyles(Button)>
                <WithStyles(Button)
                        onClick={[Function]}
                        variant="flat"
                >
                        signup
                </WithStyles(Button)>
                <WithStyles(Button)
                        onClick={[Function]}
                        variant="flat"
                >
                        Forget Password
                </WithStyles(Button)>
        </div>
        <SnackBarCustom />
</WithStyles(Paper)>,
      "className": "paperOut",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <h4
            className="mv3"
>
            Login
</h4>,
          <div
            className="flex flex-column"
>
            <TextField
                        id="email"
                        label="Your email address"
                        onChange={[Function]}
                        required={false}
                        select={false}
                        type="text"
                        value=""
            />
            <TextField
                        id="password"
                        label="Password"
                        onChange={[Function]}
                        required={false}
                        select={false}
                        type="password"
                        value=""
            />
</div>,
          <div
            className="flex mt3"
>
            <WithStyles(Button)
                        id="ok"
                        onClick={[Function]}
                        variant="raised"
            >
                        Ok
            </WithStyles(Button)>
            <WithStyles(Button)
                        onClick={[Function]}
                        variant="flat"
            >
                        signup
            </WithStyles(Button)>
            <WithStyles(Button)
                        onClick={[Function]}
                        variant="flat"
            >
                        Forget Password
            </WithStyles(Button)>
</div>,
          <SnackBarCustom />,
        ],
        "className": "paperIn",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Login",
            "className": "mv3",
          },
          "ref": null,
          "rendered": "Login",
          "type": "h4",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <TextField
                id="email"
                label="Your email address"
                onChange={[Function]}
                required={false}
                select={false}
                type="text"
                value=""
/>,
              <TextField
                id="password"
                label="Password"
                onChange={[Function]}
                required={false}
                select={false}
                type="password"
                value=""
/>,
            ],
            "className": "flex flex-column",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "id": "email",
                "label": "Your email address",
                "onChange": [Function],
                "required": false,
                "select": false,
                "type": "text",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "id": "password",
                "label": "Password",
                "onChange": [Function],
                "required": false,
                "select": false,
                "type": "password",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <WithStyles(Button)
                id="ok"
                onClick={[Function]}
                variant="raised"
>
                Ok
</WithStyles(Button)>,
              <WithStyles(Button)
                onClick={[Function]}
                variant="flat"
>
                signup
</WithStyles(Button)>,
              <WithStyles(Button)
                onClick={[Function]}
                variant="flat"
>
                Forget Password
</WithStyles(Button)>,
            ],
            "className": "flex mt3",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Ok",
                "id": "ok",
                "onClick": [Function],
                "variant": "raised",
              },
              "ref": null,
              "rendered": "Ok",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "signup",
                "onClick": [Function],
                "variant": "flat",
              },
              "ref": null,
              "rendered": "signup",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Forget Password",
                "onClick": [Function],
                "variant": "flat",
              },
              "ref": null,
              "rendered": "Forget Password",
              "type": [Function],
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": [Function],
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <WithStyles(Paper)
          className="paperIn"
>
          <h4
                    className="mv3"
          >
                    Login
          </h4>
          <div
                    className="flex flex-column"
          >
                    <TextField
                              id="email"
                              label="Your email address"
                              onChange={[Function]}
                              required={false}
                              select={false}
                              type="text"
                              value=""
                    />
                    <TextField
                              id="password"
                              label="Password"
                              onChange={[Function]}
                              required={false}
                              select={false}
                              type="password"
                              value=""
                    />
          </div>
          <div
                    className="flex mt3"
          >
                    <WithStyles(Button)
                              id="ok"
                              onClick={[Function]}
                              variant="raised"
                    >
                              Ok
                    </WithStyles(Button)>
                    <WithStyles(Button)
                              onClick={[Function]}
                              variant="flat"
                    >
                              signup
                    </WithStyles(Button)>
                    <WithStyles(Button)
                              onClick={[Function]}
                              variant="flat"
                    >
                              Forget Password
                    </WithStyles(Button)>
          </div>
          <SnackBarCustom />
</WithStyles(Paper)>,
        "className": "paperOut",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <h4
              className="mv3"
>
              Login
</h4>,
            <div
              className="flex flex-column"
>
              <TextField
                            id="email"
                            label="Your email address"
                            onChange={[Function]}
                            required={false}
                            select={false}
                            type="text"
                            value=""
              />
              <TextField
                            id="password"
                            label="Password"
                            onChange={[Function]}
                            required={false}
                            select={false}
                            type="password"
                            value=""
              />
</div>,
            <div
              className="flex mt3"
>
              <WithStyles(Button)
                            id="ok"
                            onClick={[Function]}
                            variant="raised"
              >
                            Ok
              </WithStyles(Button)>
              <WithStyles(Button)
                            onClick={[Function]}
                            variant="flat"
              >
                            signup
              </WithStyles(Button)>
              <WithStyles(Button)
                            onClick={[Function]}
                            variant="flat"
              >
                            Forget Password
              </WithStyles(Button)>
</div>,
            <SnackBarCustom />,
          ],
          "className": "paperIn",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Login",
              "className": "mv3",
            },
            "ref": null,
            "rendered": "Login",
            "type": "h4",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <TextField
                  id="email"
                  label="Your email address"
                  onChange={[Function]}
                  required={false}
                  select={false}
                  type="text"
                  value=""
/>,
                <TextField
                  id="password"
                  label="Password"
                  onChange={[Function]}
                  required={false}
                  select={false}
                  type="password"
                  value=""
/>,
              ],
              "className": "flex flex-column",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "id": "email",
                  "label": "Your email address",
                  "onChange": [Function],
                  "required": false,
                  "select": false,
                  "type": "text",
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "id": "password",
                  "label": "Password",
                  "onChange": [Function],
                  "required": false,
                  "select": false,
                  "type": "password",
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <WithStyles(Button)
                  id="ok"
                  onClick={[Function]}
                  variant="raised"
>
                  Ok
</WithStyles(Button)>,
                <WithStyles(Button)
                  onClick={[Function]}
                  variant="flat"
>
                  signup
</WithStyles(Button)>,
                <WithStyles(Button)
                  onClick={[Function]}
                  variant="flat"
>
                  Forget Password
</WithStyles(Button)>,
              ],
              "className": "flex mt3",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Ok",
                  "id": "ok",
                  "onClick": [Function],
                  "variant": "raised",
                },
                "ref": null,
                "rendered": "Ok",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "signup",
                  "onClick": [Function],
                  "variant": "flat",
                },
                "ref": null,
                "rendered": "signup",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Forget Password",
                  "onClick": [Function],
                  "variant": "flat",
                },
                "ref": null,
                "rendered": "Forget Password",
                "type": [Function],
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": [Function],
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`Signup 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <withApollo(Apollo(Signup)) />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": [Function],
    },
    "ref": null,
    "rendered": [Function],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": [Function],
      },
      "ref": null,
      "rendered": [Function],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
